from aiogram import types
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.filters import Command
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import os

load_dotenv()
db = os.getenv("DB")

from keyboards.menu_bar import get_menu_buttons
from models.models import Departments

router = Router()

engine = create_engine(db)
Session = sessionmaker(bind=engine)
session = Session()

@router.message(Command("start"))
async def cmd_start(message: Message):
    photo_url = "https://th.bing.com/th/id/OIG.Y8RoHD3mrWx1swKpoNnf?pid=ImgGn"
    await message.answer_photo(
        photo=photo_url,
        caption=f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{message.from_user.full_name}</b>! "
                f"–ò –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—É–Ω–∏–≤–µ—Ä–º–∞–≥ <b>GreatStore</b>.\n"
                f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ü–µ–Ω–∞–º!\n"
                f"–°–ø–µ—à–∏—Ç–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ. üòä", reply_markup=get_menu_buttons(), parse_mode=ParseMode.HTML
    )

@router.message(Command("server"))
async def process_start_command(message: Message):
    await message.reply("–Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–í—Å—ë —Ö–æ—Ä–æ—à–æ:)")

@router.message(Command("get_data"))
async def process_get_data_command(message: Message):
    try:

        departments = session.query(Departments).all()

        response_message = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã '–û—Ç–¥–µ–ª—ã':\n"
        for department in departments:
            response_message += f"ID: {department.departmentid}\n" \
                               f"–û—Ç–¥–µ–ª: {department.departmentname}\n" \
                               f"URL: {department.photourl}\n "

        await message.answer(response_message)
    except Exception as e:
        print(f"Error retrieving and sending data: {e}")

@router.message(F.text.lower() == "üè™ –∫–∞—Ç–∞–ª–æ–≥")
async def cmd_catalog(message: Message):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞—Ç–∞–ª–æ–≥")

@router.message(F.text.lower() == "üõ† –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_setting(message: Message):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.message(F.text.lower() == "üéß –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="Github", url="https://github.com/1RMAsik")
    )
    builder.row(types.InlineKeyboardButton(
        text="–¢–µ–ª–µ–≥—Ä–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", url="https://t.me/ZachemNy")
    )

    await message.answer(
        '–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¢–≥.',
        reply_markup=builder.as_markup()
    )
